// SPDX-License-Identifier: MIT

package io.github.northmaxdev.coinplot.backend.core.exchange;

import io.github.northmaxdev.coinplot.backend.core.currency.Currency;
import io.github.northmaxdev.coinplot.lang.chrono.LocalDateInterval;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import static java.util.stream.Collectors.joining;

public final class ExchangeRateSetRequests {

    public static final class ParametersBuilder {

        private static final String STANDARD_TARGET_DELIMITER = ",";
        private static final DateTimeFormatter DEFAULT_DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE;

        private final @Nonnull ExchangeRateSetRequest request;
        private @Nullable String baseParameterName;
        private @Nullable String targetsParameterName;
        private @Nullable String startParameterName;
        private @Nullable String endParameterName;
        private @Nonnull DateTimeFormatter dateFormatter;

        public ParametersBuilder(@Nonnull ExchangeRateSetRequest request) {
            this.request = Objects.requireNonNull(request);

            baseParameterName = null;
            targetsParameterName = null;
            startParameterName = null;
            endParameterName = null;
            dateFormatter = DEFAULT_DATE_FORMATTER;
        }

        public ParametersBuilder baseParameterName(@Nullable String s) {
            baseParameterName = s;
            return this;
        }

        public ParametersBuilder targetsParameterName(@Nullable String s) {
            targetsParameterName = s;
            return this;
        }

        public ParametersBuilder startParameterName(@Nullable String s) {
            startParameterName = s;
            return this;
        }

        public ParametersBuilder endParameterName(@Nullable String s) {
            endParameterName = s;
            return this;
        }

        public ParametersBuilder dateFormatter(@Nullable DateTimeFormatter f) {
            dateFormatter = Objects.requireNonNullElse(f, DEFAULT_DATE_FORMATTER);
            return this;
        }

        public @Nonnull Map<String, String> build() {
            Map<String, String> parameters = new HashMap<>(4);

            if (baseParameterName != null) {
                Currency base = request.getBase();
                parameters.put(baseParameterName, base.getCode());
            }

            if (targetsParameterName != null) {
                String joinedTargetCodes = request.getTargets()
                        .stream()
                        .map(Currency::getCode)
                        .collect(joining(STANDARD_TARGET_DELIMITER));
                // Targets should never be empty as per the API contract of ExchangeRateSetRequest.
                // Therefore, joining them should never produce and empty string either.
                parameters.put(targetsParameterName, joinedTargetCodes);
            }

            LocalDateInterval dateInterval = request.getDateInterval();

            if (startParameterName != null) {
                LocalDate start = dateInterval.start();
                parameters.put(startParameterName, dateFormatter.format(start));
            }

            if (endParameterName != null) {
                LocalDate end = dateInterval.end();
                parameters.put(endParameterName, dateFormatter.format(end));
            }

            return parameters;
        }

        @Override
        public boolean equals(Object obj) {
            return obj instanceof ParametersBuilder that
                    && Objects.equals(this.request, that.request)
                    && Objects.equals(this.baseParameterName, that.baseParameterName)
                    && Objects.equals(this.targetsParameterName, that.targetsParameterName)
                    && Objects.equals(this.startParameterName, that.startParameterName)
                    && Objects.equals(this.endParameterName, that.endParameterName)
                    && Objects.equals(this.dateFormatter, that.dateFormatter);
        }

        @Override
        public int hashCode() {
            return Objects.hash(
                    request,
                    baseParameterName,
                    targetsParameterName,
                    startParameterName,
                    endParameterName,
                    dateFormatter
            );
        }

        @Override
        public String toString() {
            // Generated by IntelliJ IDEA 2023.2
            return "ParametersBuilder{" +
                    "request=" + request +
                    ", baseParameterName='" + baseParameterName + '\'' +
                    ", targetsParameterName='" + targetsParameterName + '\'' +
                    ", startParameterName='" + startParameterName + '\'' +
                    ", endParameterName='" + endParameterName + '\'' +
                    ", dateFormatter=" + dateFormatter +
                    '}';
        }
    }

    private ExchangeRateSetRequests() {
        throw new UnsupportedOperationException();
    }

    public static boolean commonPropertiesAreEqual(@Nonnull ExchangeRateSetRequest a, @Nonnull ExchangeRateSetRequest b) {
        Objects.requireNonNull(a);
        Objects.requireNonNull(b);

        return Objects.equals(a.getBase(), b.getBase())
                && Objects.equals(a.getTargets(), b.getTargets())
                && Objects.equals(a.getDateInterval(), b.getDateInterval());
    }

    public static int hashCommonProperties(@Nullable ExchangeRateSetRequest r) {
        return r == null ? 0 : Objects.hash(r.getBase(), r.getTargets(), r.getDateInterval());
    }
}
