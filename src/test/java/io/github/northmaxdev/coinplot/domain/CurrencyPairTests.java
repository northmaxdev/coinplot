// SPDX-License-Identifier: MIT

package io.github.northmaxdev.coinplot.domain;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvFileSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.math.BigDecimal;
import java.util.Currency;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
import static org.assertj.core.api.Assertions.assertThatNoException;
import static org.assertj.core.api.Assumptions.assumeThatCode;

class CurrencyPairTests {

    @Nested
    class MainConstructor {

        @Test
        void throwsIaeOnSameCurrencies() {
            Currency euro = Currency.getInstance("EUR");

            assertThatIllegalArgumentException().isThrownBy(() -> new CurrencyPair(euro, euro));
        }

        @Test
        void doesNotThrowOnDifferentCurrencies() {
            Currency euro = Currency.getInstance("EUR");
            Currency usDollar = Currency.getInstance("USD");

            assertThatNoException().isThrownBy(() -> new CurrencyPair(euro, usDollar));
        }
    }

    @Nested
    class InstanceMethods {

        CurrencyPair euroToUsDollar;

        @BeforeAll
        void initTestInstance() {
            Currency euro = Currency.getInstance("EUR");
            Currency unitedStatesDollar = Currency.getInstance("USD");

            // We can't test instance methods if we can't even instantiate the class
            assumeThatCode(() -> euroToUsDollar = new CurrencyPair(euro, unitedStatesDollar))
                    .withFailMessage("cannot instantiate CurrencyPair (constructor throws)")
                    .doesNotThrowAnyException();
        }

        @Nested
        class InvolvesCurrency {

            @Test
            void returnsTrueOnInvolvedBase() {
                Currency euro = Currency.getInstance("EUR");

                assertThat(euroToUsDollar.involves(euro)).isTrue();
            }

            @Test
            void returnsTrueOnInvolvedQuote() {
                Currency usDollar = Currency.getInstance("USD");

                assertThat(euroToUsDollar.involves(usDollar)).isTrue();
            }

            @ParameterizedTest
            @ValueSource(strings = {"JPY", "KRW", "CNY", "THB", "MYR"})
            void returnsFalseOnUninvolvedCurrency(String currencyCode) {
                Currency asianCurrency = Currency.getInstance(currencyCode);

                assertThat(euroToUsDollar.involves(asianCurrency)).isFalse();
            }

            @Test
            void returnsFalseOnNull() {
                assertThat(euroToUsDollar.involves(null)).isFalse();
            }
        }

        @ParameterizedTest
        @CsvFileSource(resources = "/currency_pair_pips_test_data.csv") // Test data generated by Claude 4 Sonnet
        void returnsExpectedPipDefinitionForPair(String baseCode, String quoteCode, BigDecimal expectedPipDefinition) {
            Currency base = Currency.getInstance(baseCode);
            Currency quote = Currency.getInstance(quoteCode);
            CurrencyPair currencyPair = new CurrencyPair(base, quote);

            assertThat(currencyPair.getPipDefinition()).isEqualTo(expectedPipDefinition);
        }

        @Test
        void toStringReturnsExpectedFormat() {
            assertThat(euroToUsDollar.toString()).isEqualTo("EUR/USD");
        }

        @Test
        void equalsContract() {
            // An internal invariant of CurrencyPair is that it never involves the same currency twice.
            // If we let EqualsVerifier use random currencies, it'll generate something like EUR/EUR, which is not allowed.
            // We should provide prefab values where possible options for "base" do not intersect with possible options for "quote".

            Currency euro = Currency.getInstance("EUR");
            Currency swissFranc = Currency.getInstance("CHF");
            Currency britishPound = Currency.getInstance("GBP");
            Currency canadianDollar = Currency.getInstance("CAD");

            EqualsVerifier.forClass(CurrencyPair.class)
                    .withPrefabValuesForField("base", euro, swissFranc)
                    .withPrefabValuesForField("quote", britishPound, canadianDollar)
                    .verify();
        }
    }

    @Nested
    class StaticMethods {

    }
}